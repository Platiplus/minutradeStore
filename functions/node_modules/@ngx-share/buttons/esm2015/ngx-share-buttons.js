import { ChangeDetectionStrategy, Component, EventEmitter, Input, NgModule, Output } from '@angular/core';
import { CONFIG, ShareButtons } from '@ngx-share/core';
import { ShareButtonModule } from '@ngx-share/button';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ShareButtonsComponent {
    /**
     * @param {?} share
     */
    constructor(share) {
        this.share = share;
        /**
         * Share Buttons array
         */
        this.buttons = [];
        /**
         * Buttons to include
         */
        this.includeButtons = this.share.buttons;
        /**
         * Buttons to exclude
         */
        this.excludeButtons = [];
        /**
         * Number of shown buttons
         */
        this.shownButtons = this.includeButtons.length;
        /**
         * Disable more/less buttons
         */
        this.showAll = false;
        this.theme = this.share.theme;
        /**
         * Show buttons icon
         */
        this.showIcon = true;
        /**
         * Show buttons name
         */
        this.showText = false;
        /**
         * Show buttons share count
         */
        this.showCount = false;
        /**
         * Buttons size
         */
        this.size = 0;
        /**
         * Share count event
         */
        this.count = new EventEmitter();
        /**
         * Share dialog opened event
         */
        this.opened = new EventEmitter();
        /**
         * Share dialog closed event
         */
        this.closed = new EventEmitter();
    }
    /**
     * @param {?} includeButtons
     * @return {?}
     */
    set include(includeButtons) {
        this.includeButtons = includeButtons;
        this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);
    }
    /**
     * @param {?} excludeButtons
     * @return {?}
     */
    set exclude(excludeButtons) {
        this.excludeButtons = excludeButtons;
        this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);
    }
    /**
     * @param {?} shownCount
     * @return {?}
     */
    set setShownButtons(shownCount) {
        this.shownButtons = shownCount;
        this.totalButtons = this.buttons.length;
        /** Set showAll to true if shown buttons count = selected buttons count */
        this.showAll = this.shownButtons === this.totalButtons + 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /**  if user didn't select the buttons use all */
        if (!this.excludeButtons.length) {
            this.buttons = this.includeButtons.filter((btn) => this.excludeButtons.indexOf(btn) < 0);
        }
    }
    /**
     * @return {?}
     */
    more() {
        this.totalButtons = this.shownButtons;
        this.shownButtons = this.buttons.length;
        this.showAll = true;
    }
    /**
     * @return {?}
     */
    less() {
        this.shownButtons = this.totalButtons;
        this.showAll = false;
    }
}
ShareButtonsComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-buttons',
                template: `<div class="sb-group sb-{{theme}}">

  <share-button *ngFor="let button of buttons | slice: 0:shownButtons" [button]="button" [theme]="theme" [url]="url" [title]="title"
    [description]="description" [image]="image" [tags]="tags" [showCount]="showCount" [showIcon]="showIcon" [showText]="showText"
    [size]="size" (opened)="opened.emit($event)" (closed)="closed.emit($event)" (count)="count.emit($event)"></share-button>

  <div class="sb-button sb-{{theme}}">

    <!-- SHOW LESS BUTTON -->

    <button *ngIf="showAll && shownButtons === buttons.length"
            [style.fontSize.px]="(1 + size/20) * 14"
            class="sb-wrapper sb-more sb-show-icon" (click)="less()">

      <div class="sb-inner">
        <div class="sb-content">
          <div class="sb-icon">
            <i class="fa fa-minus" aria-hidden="true"></i>
          </div>
        </div>
      </div>
    </button>

    <!-- SHOW MORE BUTTON -->

    <button *ngIf="!showAll && shownButtons < buttons.length"
            [style.fontSize.px]="(1 + size/20) * 14"
            class="sb-wrapper sb-more sb-show-icon" (click)="more()">

      <div class="sb-inner">
        <div class="sb-content">
          <div class="sb-icon">
            <i class="fa fa-ellipsis-h" aria-hidden="true"></i>
          </div>
        </div>
      </div>
    </button>

  </div>
</div>
`,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
ShareButtonsComponent.ctorParameters = () => [
    { type: ShareButtons, },
];
ShareButtonsComponent.propDecorators = {
    "theme": [{ type: Input },],
    "include": [{ type: Input, args: ['include',] },],
    "exclude": [{ type: Input, args: ['exclude',] },],
    "setShownButtons": [{ type: Input, args: ['show',] },],
    "url": [{ type: Input },],
    "title": [{ type: Input },],
    "description": [{ type: Input },],
    "image": [{ type: Input },],
    "tags": [{ type: Input },],
    "showIcon": [{ type: Input },],
    "showText": [{ type: Input },],
    "showCount": [{ type: Input },],
    "size": [{ type: Input },],
    "count": [{ type: Output },],
    "opened": [{ type: Output },],
    "closed": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} config
 * @return {?}
 */
function ShareButtonsFactory(config) {
    return new ShareButtons(config);
}
class ShareButtonsModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [
                { provide: CONFIG, useValue: config },
                {
                    provide: ShareButtons,
                    useFactory: ShareButtonsFactory,
                    deps: [CONFIG]
                }
            ]
        };
    }
}
ShareButtonsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ShareButtonsComponent
                ],
                imports: [
                    ShareButtonModule
                ],
                exports: [
                    ShareButtonModule,
                    ShareButtonsComponent
                ]
            },] },
];
/** @nocollapse */
ShareButtonsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { ShareButtonsFactory, ShareButtonsModule, ShareButtonsComponent };
//# sourceMappingURL=ngx-share-buttons.js.map
