{"version":3,"file":"core.umd.min.js","sources":["../../../../.temp/packages/@ngx-meta/core/src/util.ts","../../../../.temp/packages/@ngx-meta/core/index.ts","../../../../.temp/packages/@ngx-meta/core/src/meta.loader.ts","../../../../.temp/packages/@ngx-meta/core/src/meta.service.ts","../../../../.temp/packages/@ngx-meta/core/src/meta.guard.ts"],"sourcesContent":["// libs\r\nimport { Observable } from 'rxjs/Observable';\r\n// TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\r\n// import { $$observable as symbolObservable } from 'rxjs/symbol/observable';\r\n\r\nexport function isPromise(obj: any): obj is Promise<any> {\r\n  return !!obj && typeof obj.then === 'function';\r\n}\r\n\r\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\r\n  // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved\r\n  // return !!(obj && obj[symbolObservable]);\r\n  return !!obj && typeof obj.subscribe === 'function';\r\n}\r\n","// angular\r\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\n// module\r\nimport { MetaGuard } from './src/meta.guard';\r\nimport { MetaLoader, MetaStaticLoader } from './src/meta.loader';\r\nimport { MetaService } from './src/meta.service';\r\n\r\nexport * from './src/models/meta-settings';\r\nexport * from './src/models/page-title-positioning';\r\nexport * from './src/meta.guard';\r\nexport * from './src/meta.loader';\r\nexport * from './src/meta.service';\r\n\r\n// for AoT compilation\r\nexport function metaFactory(): MetaLoader {\r\n  return new MetaStaticLoader();\r\n}\r\n\r\n@NgModule()\r\nexport class MetaModule {\r\n  static forRoot(configuredProvider: any = {\r\n    provide: MetaLoader,\r\n    useFactory: (metaFactory)\r\n  }): ModuleWithProviders {\r\n    return {\r\n      ngModule: MetaModule,\r\n      providers: [\r\n        configuredProvider,\r\n        MetaGuard,\r\n        MetaService\r\n      ]\r\n    };\r\n  }\r\n\r\n  constructor(@Optional() @SkipSelf() parentModule: MetaModule) {\r\n    if (parentModule)\r\n      throw new Error('MetaModule already loaded; import in root module only.');\r\n  }\r\n}\r\n","// module\r\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\nimport { MetaSettings } from './models/meta-settings';\r\n\r\nexport abstract class MetaLoader {\r\n  abstract get settings(): MetaSettings;\r\n}\r\n\r\nexport class MetaStaticLoader implements MetaLoader {\r\n  get settings(): MetaSettings {\r\n    return this.providedSettings;\r\n  }\r\n\r\n  constructor(private readonly providedSettings: MetaSettings = {\r\n    pageTitlePositioning: PageTitlePositioning.PrependPageTitle,\r\n    defaults: {}\r\n  }) {\r\n  }\r\n}\r\n","// angular\r\nimport { Injectable } from '@angular/core';\r\nimport { Meta, Title } from '@angular/platform-browser';\r\n\r\n// libs\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/observable/of';\r\nimport 'rxjs/add/observable/fromPromise';\r\n\r\n// module\r\nimport { PageTitlePositioning } from './models/page-title-positioning';\r\nimport { MetaLoader } from './meta.loader';\r\nimport { isObservable, isPromise } from './util';\r\nimport { MetaSettings } from './models/meta-settings';\r\n\r\n@Injectable()\r\nexport class MetaService {\r\n  protected readonly settings: MetaSettings;\r\n  private readonly isMetaTagSet: any;\r\n\r\n  constructor(readonly loader: MetaLoader,\r\n              private readonly title: Title,\r\n              private readonly meta: Meta) {\r\n    this.settings = loader.settings;\r\n    this.isMetaTagSet = {};\r\n  }\r\n\r\n  setTitle(title: string, override = false): void {\r\n    const title$ = title\r\n      ? this.callback(title)\r\n      : Observable.of('');\r\n\r\n    title$\r\n      .subscribe((res: string) => {\r\n        let fullTitle = '';\r\n\r\n        if (!res) {\r\n          const defaultTitle$ = (this.settings.defaults && this.settings.defaults['title'])\r\n            ? this.callback(this.settings.defaults['title'])\r\n            : Observable.of('');\r\n\r\n          defaultTitle$\r\n            .subscribe((defaultTitle: string) => {\r\n              if (!override && this.settings.pageTitleSeparator && this.settings.applicationName)\r\n                this.callback(this.settings.applicationName)\r\n                  .subscribe((applicationName: string) => {\r\n                    fullTitle = applicationName ? this.getTitleWithPositioning(defaultTitle, applicationName) : defaultTitle;\r\n                    this.updateTitle(fullTitle);\r\n                  });\r\n              else\r\n                this.updateTitle(defaultTitle);\r\n            });\r\n        } else if (!override && this.settings.pageTitleSeparator && this.settings.applicationName)\r\n          this.callback(this.settings.applicationName)\r\n            .subscribe((applicationName: string) => {\r\n              fullTitle = applicationName ? this.getTitleWithPositioning(res, applicationName) : res;\r\n              this.updateTitle(fullTitle);\r\n            });\r\n        else\r\n          this.updateTitle(res);\r\n      });\r\n  }\r\n\r\n  setTag(key: string, value: string): void {\r\n    if (key === 'title')\r\n      throw new Error(`Attempt to set ${key} through \"setTag\": \"title\" is a reserved tag name. `\r\n        + 'Please use `MetaService.setTitle` instead.');\r\n\r\n    value = value || ((this.settings.defaults && this.settings.defaults[key])\r\n      ? this.settings.defaults[key]\r\n      : '');\r\n\r\n    const value$ = (key !== 'og:locale' && key !== 'og:locale:alternate')\r\n      ? this.callback(value)\r\n      : Observable.of(value);\r\n\r\n    value$\r\n      .subscribe((res: string) => {\r\n        this.updateTag(key, res);\r\n      });\r\n  }\r\n\r\n  update(currentUrl: string, metaSettings?: any): void {\r\n    if (!metaSettings) {\r\n      const fallbackTitle = this.settings.defaults\r\n        ? (this.settings.defaults['title'] || this.settings['applicationName'])\r\n        : this.settings['applicationName'];\r\n\r\n      this.setTitle(fallbackTitle, true);\r\n    } else {\r\n      if (metaSettings.disabled) {\r\n        this.update(currentUrl);\r\n\r\n        return;\r\n      }\r\n\r\n      this.setTitle(metaSettings.title, metaSettings.override);\r\n\r\n      Object.keys(metaSettings)\r\n        .forEach(key => {\r\n          let value = metaSettings[key];\r\n\r\n          if (key === 'title' || key === 'override')\r\n            return;\r\n          else if (key === 'og:locale')\r\n            value = value.replace(/-/g, '_');\r\n          else if (key === 'og:locale:alternate') {\r\n            const currentLocale = metaSettings['og:locale'];\r\n            this.updateLocales(currentLocale, metaSettings[key]);\r\n\r\n            return;\r\n          }\r\n\r\n          this.setTag(key, value);\r\n        });\r\n    }\r\n\r\n    if (this.settings.defaults)\r\n      Object.keys(this.settings.defaults)\r\n        .forEach(key => {\r\n          let value = this.settings.defaults[key];\r\n\r\n          if ((metaSettings && (key in this.isMetaTagSet || key in metaSettings)) || key === 'title' || key === 'override')\r\n            return;\r\n          else if (key === 'og:locale')\r\n            value = value.replace(/-/g, '_');\r\n          else if (key === 'og:locale:alternate') {\r\n            const currentLocale = metaSettings ? metaSettings['og:locale'] : undefined;\r\n            this.updateLocales(currentLocale, value);\r\n\r\n            return;\r\n          }\r\n\r\n          this.setTag(key, value);\r\n        });\r\n\r\n    const url = ((this.settings.applicationUrl || '/') + currentUrl)\r\n      .replace(/(https?:\\/\\/)|(\\/)+/g, '$1$2')\r\n      .replace(/\\/$/g, '');\r\n\r\n    this.setTag('og:url', url || '/');\r\n  }\r\n\r\n  removeTag(key: string): void {\r\n    this.meta.removeTag(key);\r\n  }\r\n\r\n  private callback(value: string): Observable<string> {\r\n    if (this.settings.callback) {\r\n      const value$ = this.settings.callback(value);\r\n\r\n      if (!isObservable(value$))\r\n        return isPromise(value$)\r\n          ? Observable.fromPromise(value$)\r\n          : Observable.of(value$);\r\n\r\n      return value$;\r\n    }\r\n\r\n    return Observable.of(value);\r\n  }\r\n\r\n  private getTitleWithPositioning(title: string, applicationName: string): string {\r\n    switch (this.settings.pageTitlePositioning) {\r\n      case PageTitlePositioning.AppendPageTitle:\r\n        return applicationName + this.settings.pageTitleSeparator + title;\r\n      case PageTitlePositioning.PrependPageTitle:\r\n        return title + this.settings.pageTitleSeparator + applicationName;\r\n      default:\r\n        throw new Error(`Invalid pageTitlePositioning specified [${this.settings.pageTitlePositioning}]!`);\r\n    }\r\n  }\r\n\r\n  private updateTitle(title: string): void {\r\n    this.title.setTitle(title);\r\n    this.meta.updateTag({\r\n      property: 'og:title',\r\n      content: title\r\n    });\r\n  }\r\n\r\n  private updateLocales(currentLocale: string, availableLocales: string): void {\r\n    currentLocale = currentLocale || (this.settings.defaults\r\n      ? this.settings.defaults['og:locale']\r\n      : '');\r\n\r\n    if (currentLocale && this.settings.defaults)\r\n      this.settings.defaults['og:locale'] = currentLocale.replace(/_/g, '-');\r\n\r\n    // TODO: set HTML lang attribute - https://github.com/ngx-meta/core/issues/32\r\n    // const html = this.document.querySelector('html');\r\n    // html.setAttribute('lang', currentLocale);\r\n\r\n    const elements = this.meta.getTags('property=\"og:locale:alternate\"');\r\n\r\n    elements.forEach((element: any) => {\r\n      this.meta.removeTagElement(element);\r\n    });\r\n\r\n    if (currentLocale && availableLocales)\r\n      availableLocales.split(',')\r\n        .forEach((locale: string) => {\r\n          if (currentLocale.replace(/-/g, '_') !== locale.replace(/-/g, '_'))\r\n            this.meta.addTag({\r\n              property: 'og:locale:alternate',\r\n              content: locale.replace(/-/g, '_')\r\n            });\r\n        });\r\n  }\r\n\r\n  private updateTag(key: string, value: string): void {\r\n    if (key.lastIndexOf('og:', 0) === 0)\r\n      this.meta.updateTag({\r\n        property: key,\r\n        content: key === 'og:locale' ? value.replace(/-/g, '_') : value\r\n      });\r\n    else\r\n      this.meta.updateTag({\r\n        name: key,\r\n        content: value\r\n      });\r\n\r\n    this.isMetaTagSet[key] = true;\r\n\r\n    if (key === 'description')\r\n      this.meta.updateTag({\r\n        property: 'og:description',\r\n        content: value\r\n      });\r\n    else if (key === 'author')\r\n      this.meta.updateTag({\r\n        property: 'og:author',\r\n        content: value\r\n      });\r\n    else if (key === 'publisher')\r\n      this.meta.updateTag({\r\n        property: 'og:publisher',\r\n        content: value\r\n      });\r\n    else if (key === 'og:locale') {\r\n      const availableLocales = this.settings.defaults\r\n        ? this.settings.defaults['og:locale:alternate']\r\n        : '';\r\n\r\n      this.updateLocales(value, availableLocales);\r\n      this.isMetaTagSet['og:locale:alternate'] = true;\r\n    } else if (key === 'og:locale:alternate') {\r\n      const currentLocale = this.meta.getTag('property=\"og:locale\"').content;\r\n\r\n      this.updateLocales(currentLocale, value);\r\n      this.isMetaTagSet['og:locale'] = true;\r\n    }\r\n  }\r\n}\r\n","// angular\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot } from '@angular/router';\r\n\r\n// module\r\nimport { MetaService } from './meta.service';\r\n\r\n@Injectable()\r\nexport class MetaGuard implements CanActivate, CanActivateChild {\r\n  constructor(private readonly meta: MetaService) {\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const url = state.url;\r\n\r\n    const metaSettings = (route && route.data && route.data['meta'])\r\n      ? route.data['meta']\r\n      : undefined;\r\n\r\n    this.meta.update(url, metaSettings);\r\n\r\n    return true;\r\n  }\r\n\r\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    return this.canActivate(route, state);\r\n  }\r\n}\r\n"],"names":["obj","then","subscribe","MetaStaticLoader","MetaLoader","providedSettings","pageTitlePositioning","PageTitlePositioning","PrependPageTitle","defaults","this","Object","loader","title","meta","settings","isMetaTagSet","MetaService","override","callback","Observable","of","res","fullTitle","_this","pageTitleSeparator","applicationName","getTitleWithPositioning","updateTitle","defaultTitle","key","value","Error","updateTag","currentUrl","metaSettings","disabled","update","setTitle","keys","forEach","replace","currentLocale","updateLocales","setTag","fallbackTitle","undefined","url","applicationUrl","removeTag","value$","isObservable","isPromise","fromPromise","AppendPageTitle","property","content","availableLocales","getTags","element","removeTagElement","split","locale","addTag","lastIndexOf","name","getTag","Injectable","Title","Meta","MetaGuard","route","state","data","canActivate","parentModule","MetaModule","configuredProvider","provide","useFactory","ngModule","providers","NgModule","Optional","SkipSelf"],"mappings":"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"}